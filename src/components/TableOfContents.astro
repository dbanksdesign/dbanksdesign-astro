---
import type { MarkdownHeading } from 'astro';
type Props = { headings: MarkdownHeading[] };
const { headings } = Astro.props;
---

<nav class="table-of-contents-wrapper">
	<div class="table-of-contents">
		<div class="table-of-contents-header">Table of contents</div>

		{
			headings
				.filter((heading) => heading.depth === 2)
				.map((heading) => (
					<a class="table-of-contents-link" href={`#${heading.slug}`}>
						{heading.text}
					</a>
				))
		}
		<span class="table-of-contents-indicator"></span>
	</div>
</nav>

<style is:global>
	.table-of-contents-wrapper {
		position: sticky;
		top: var(--header-height);
		margin-top: var(--space-medium);
	}

	.table-of-contents {
		overflow-y: auto;
		overflow-x: visible;
		padding-block: 1rem;
		height: 100%;
		width: 100%;
		/* border-inline-start: 2px solid var(--color-border-tertiary); */
	}

	.table-of-contents-header {
		padding: 0.5rem 1.5rem;
		text-transform: uppercase;
		letter-spacing: 0.1em;
		font-size: var(--size-font-small);
	}

	.table-of-contents-link {
		display: block;
		padding: 0.5rem 1.5rem;
		position: relative;
		color: var(--color-font-tertiary);
		text-decoration: none;
	}

	.table-of-contents-link[data-active='true'],
	.table-of-contents-link:active {
		font-weight: bold;
		color: var(--color-font-primary);
	}

	.table-of-contents-indicator {
		width: 4px;
		position: absolute;
		left: 0;
		background-color: var(--color-brand-primary);
		transition: all var(--spring-animation);
	}
</style>

<script>
	document.addEventListener('astro:page-load', () => {
		const options = {
			root: null,
			rootMargin: '0px',
			threshold: [1],
		};
		const wrappingElement = document.querySelector('.blog-article');
		const tocElement = document.querySelector('.table-of-contents') as HTMLDivElement;
		const tocIndicator = document.querySelector('.table-of-contents-indicator') as HTMLSpanElement;
		const observeHtags = new IntersectionObserver((e) => {
			const id = e[0].target.id;
			const currentLink = tocElement?.querySelector(`[href="#${id}"]`) as HTMLAnchorElement;
			tocElement?.querySelectorAll('[data-active="true"]').forEach((element) => {
				element.dataset.active = 'false';
			});
			currentLink.dataset.active = 'true';
			tocIndicator.style.top = `${currentLink.offsetTop}px`;
			tocIndicator.style.height = `${currentLink.offsetHeight}px`;
		}, options);

		if (wrappingElement !== null) {
			var allHtags = wrappingElement.querySelectorAll('h2');
			allHtags.forEach((tag) => {
				observeHtags.observe(tag);
			});
		}
	});
</script>
