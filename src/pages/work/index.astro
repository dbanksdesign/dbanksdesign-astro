---
import Layout from '../../layouts/Layout.astro';
import { getCollection } from 'astro:content';
import FormattedDate from '../../components/FormattedDate.astro';

const posts = (await getCollection('work')).sort(
	(a, b) => b.data.pubDate.valueOf() - a.data.pubDate.valueOf(),
);
---

<Layout>
  <div class="bg-diagonal">
  <ul class="work-cards">
    {
      posts.map((post) => (
        <li class="work-card">
          <a class="work-card-link" href={`/work/${post.id}/`}>
            {post.data.heroImage ? <img width={720} height={360} src={post.data.heroImage} alt="" /> : null}
            <h4 class="title">{post.data.title}</h4>
            <p class="date">
              {post.data.description}
            </p>
          </a>
        </li>
      ))
    }
  </ul>
</div>
</Layout>

<style>
  .work-cards {
    list-style: none;
    display: grid;
    gap: var(--space-medium);
    grid-template-columns: 1fr 1fr 1fr 1fr;
    width: 100%;
    margin: 0;
    padding: var(--space-xl);
  }

  .work-card {

  }

  .work-card-link {
    padding: var(--space-medium);
    border: 1px solid var(--color-border-primary);
    color: var(--color-font-primary);
    display: block;
    text-decoration: none;
    transform-style: preserve-3d;
    transform: perspective(5000px) rotateY(var(--rotateX)) rotateX(var(--rotateY));
    /* transition: none; */
  }

  .work-card:first-child {
    grid-column: 1 / -1;
  }

  .work-card:nth-child(2) {
    grid-column: 1 / 3;
  }

  .work-card:nth-child(3) {
    grid-column: 3 / -1;
  }
</style>


<script>
  const cards = document.querySelectorAll<HTMLAnchorElement>('.work-card-link');
  cards.forEach(card => {
    card.addEventListener('mousemove', (event) => {
      // get mouse position
      const x = event.offsetX;
      const y = event.offsetY;
      // console.log(x, y)
      
      // find the middle
      const middleX = card.offsetWidth / 2;
      const middleY = card.offsetHeight / 2;
      // console.log(middleX, middleY)

      // get offset from middle as a percentage
      // and tone it down a little
      const offsetX = ((x - middleX) / middleX) * 25;
      const offsetY = ((y - middleY) / middleY) * 25;
      // console.log(offsetX, offsetY);

      // set rotation
      card.style.setProperty("--rotateX", offsetX + "deg");
      card.style.setProperty("--rotateY", -1 * offsetY + "deg");
    })
    card.addEventListener('mouseleave', () => {
      card.style.setProperty("--rotateX", "0");
      card.style.setProperty("--rotateY", "0");
    })
  })
</script>
