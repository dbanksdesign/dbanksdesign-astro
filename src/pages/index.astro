---
import { Image } from 'astro:assets';
import Layout from '../layouts/Layout.astro';
import InstallScript from '../components/InstallScript.astro';
import SpicyVariables from 'src/icons/SpicyVariables.astro';
import DesignTokens from 'src/img/design-tokens.png';
import DTCG from 'src/img/dtcg.png';
import AmplifySticker from 'src/icons/AmplifySticker.astro';
import Pascal from 'src/icons/Pascal.astro';
---

<Layout>
	<div class="hero pattern">
		<div class="hero-bubble"></div>
		<div class="hero-bubble-2"></div>
		<div class="hero-inner">
			<h1>
				<span>I'm Danny, a </span><br />
				<pre><code id="hero-title">{' '}</code></pre>
				<code class="mobile-only">Design Technologist.</code>
			</h1>
			<p>
				I've been called many things in my career: Web Designer, Web Developer, UX designer, UI
				engineer, Product Manager, Mr. Banks, Full-Stack Developer, Front-End Engineer, Design
				Technologist, Design Systems Architect, and most recently Principal Design Technologist. But
				really, I just love building things for builders. I work on design systems and open-source
				libraries. Occasionally I write and speak about that stuff too. I've built mobile and web
				apps, both designing and developing them.
			</p>
			<div class="cta-buttons">
				<a class="cta-button" href="/work">See my work</a>
				<a class="cta-button" href="/blog">Read my writing</a>
				<InstallScript />
			</div>
		</div>
		<div class="sticker spicy-variables">
			<SpicyVariables />
		</div>
		<div class="sticker design-tokens">
			<Image src={DesignTokens} alt="" />
		</div>
		<div class="sticker amplify">
			<AmplifySticker />
		</div>
		<div class="sticker pascal">
			<Pascal />
		</div>
	</div>
</Layout>

<style>
	.sticker {
		display: none;
		position: absolute;
		z-index: 2;
		filter: drop-shadow(0 0 0.25rem var(--color-shadow));
	}

	@media (min-width: 600px) {
		.sticker {
			display: block;
		}
	}

	.spicy-variables {
		bottom: 1rem;
		left: -1rem;
		width: 10rem;
		transform: rotate(-10deg);
	}

	.design-tokens {
		right: -4rem;
		top: 5rem;
		width: 18rem;
		transform: rotate(35deg);
	}

	.amplify {
		right: -3rem;
		bottom: 5rem;
		width: 10rem;
		transform: rotate(-15deg);
	}

	.pascal {
		left: 50%;
		top: 0;
		width: 8rem;
		transform: rotate(10deg);
	}

	.cta-buttons {
		display: flex;
		flex-direction: column;
		gap: var(--space-medium);
	}

	@media (min-width: 800px) {
		.cta-buttons {
			display: flex;
			flex-direction: row;
			gap: var(--space-medium);
		}
	}

	.cta-button {
		position: relative;
		display: flex;
		align-items: center;
		text-decoration: none;
		padding: var(--space-medium) var(--space-large);
		font-weight: bold;
		background-color: var(--color-background-primary);
		border: 1px solid var(--color-border-primary);
		box-shadow: 5px 5px 0 0 var(--color-border-tertiary);
		transition: all 0.2s ease;
	}

	/* .cta-button::after {
		content: '';
		position: absolute;
		top: 0;
		left: -5rem;
		right: -5rem;
		border-top: 1px solid var(--color-border-secondary);
	} */

	.cta-button:hover {
		box-shadow: 10px 10px 0 0 var(--color-border-tertiary);
		transform: translate(-5px, -5px);
	}

	.hero {
		padding: 0 var(--size-padding-xl);
		position: relative;
		overflow: hidden;
		height: 100vh;
		display: flex;
		flex-direction: column;
		justify-content: center;
	}

	.hero::before {
		content: '';
		position: absolute;
		top: 0;
		left: 0;
		width: 100%;
		height: 50%;
		background: linear-gradient(var(--color-background-primary), transparent);
	}

	.hero-bubble-2 {
		content: '';
		position: absolute;
		top: 25%;
		left: 0;
		width: 800px;
		height: 800px;
		opacity: 0.125;
		filter: blur(100px);
		background-color: var(--color-brand-secondary);
	}

	.hero-bubble {
		position: absolute;
		top: var(--top, 50%);
		left: var(--left, 50%);
		width: 600px;
		height: 600px;
		opacity: 0.125;
		filter: blur(100px);
		background-color: var(--color-brand-primary);
	}

	.hero-inner {
		position: relative;
		z-index: 2;
		max-width: 60rem;
		margin: 0 auto;
		padding-block: var(--space-xl);
	}

	h1 :global(pre),
	h1 :global(code) {
		display: none;
	}

	h1 :global(code) {
		color: var(--color-brand-primary);
		-webkit-text-stroke-width: 0;
		filter: none;
	}

	h1 :global(.mobile-only) {
		display: block;
	}

	@media (min-width: 800px) {
		h1 :global(.mobile-only) {
			display: none;
		}

		h1 :global(code) {
			display: inline-block;
		}
		h1 :global(pre) {
			display: inline-block;
			position: relative;
			padding: var(--space-medium) var(--space-large);
			line-height: 1;
		}

		h1 :global(pre::after) {
			content: '';
			position: absolute;
			top: 0;
			left: 0;
			width: 4rem;
			border-top: 1px solid var(--color-border-primary);
		}

		h1 :global(pre::before) {
			content: '';
			position: absolute;
			top: 0;
			left: 0;
			height: 4rem;
			border-left: 1px solid var(--color-border-primary);
		}

		h1 :global(code::after) {
			content: '';
			position: absolute;
			bottom: 0;
			right: 0;
			width: 4rem;
			border-bottom: 1px solid var(--color-border-primary);
		}

		h1 :global(code::before) {
			content: '';
			position: absolute;
			bottom: 0;
			right: 0;
			height: 4rem;
			border-right: 1px solid var(--color-border-primary);
		}
	}
</style>

<script>
	document.addEventListener('astro:page-load', () => {
		const titles = ['Design Technologist.', 'Product Manager.', 'Front-end Engineer.'];

		const elem = document.getElementById('hero-title');
		let titleIndex = 0;
		let charIndex = 0;
		let isDeleting = false;
		let isPaused = false;
		let pauseIndex = 0;
		const pauseTicks = 10;

		let interval = setInterval(writer, 100);
		elem?.addEventListener('mouseover', () => {
			clearInterval(interval);
		});
		elem?.addEventListener('mouseleave', () => {
			interval = setInterval(writer, 100);
		});

		function writer() {
			if (elem) {
				const title = titles[titleIndex];

				if (isPaused) {
					if (pauseIndex >= pauseTicks) {
						pauseIndex = 0;
						isPaused = false;
						isDeleting = true;
					} else {
						pauseIndex++;
					}
					return;
				}

				if (isDeleting) {
					if (charIndex <= 0) {
						isDeleting = false;
						titleIndex = titleIndex >= titles.length - 1 ? 0 : titleIndex + 1;
						charIndex = 0;
						return;
					}
					elem.innerText = elem.innerText.slice(0, charIndex);
					charIndex--;
					return;
				} else {
					if (charIndex < title.length) {
						elem.innerText = elem?.innerText + title.charAt(charIndex);
						charIndex++;
					} else {
						isPaused = true;
					}
				}
			}
		}
	});
</script>
